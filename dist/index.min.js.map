{"version":3,"sources":["index.js"],"names":["inquirer","require","mysql","connection","createConnection","host","port","user","startScreen","type","choices","message","then","console","addDepartment","addRole","result","log","option","viewTable","addEmployee","updateEmployee","quit","name","prompt","answer","query","deptName","err","res","table","roleName","salaryTotal","deptID","eeFirstName","eeLastName","roleID","managerID","newRoleID","eeID","end","connect","threadId"],"mappings":"aACA,IAAMA,SAAWC,QAAQ,YADzBC,MAAAD,QAAA,SAMME,WAAaD,MAAME,iBAAiB,CACxCC,KAAM,YADRC,KAAMH,KACJE,KAAM,OACNC,SAFwC,cAGxCC,SAAM,qBAaR,SAASC,cACPR,SAEIS,OAAM,CACNC,KAAO,OAUPC,QAAS,CACL,iBAELC,WACCC,eAVE,mBAYF,aACE,iBACEC,uBACA,QACFH,QAAK,6BACHI,KAAAA,WARLH,KAAK,SAASI,GAYT,OAFFH,QAAKI,IAAA,gBAALD,EAAAE,QAEEF,EAAAE,QARF,IAAK,iBASLJ,gBACEK,MACA,IAAA,WAPAJ,UAQF,MACEI,IAAAA,eACAC,cANA,MAOF,IAAK,mBACHD,UAAU,cACV,MALF,IAAK,aAMLA,UAAK,QACHE,MACA,IAAA,iBAJAF,UAAU,YAKZ,MACEG,IAAI,uBAvBRD,iBAnBJ,MA+CF,QALUC,UAUJC,SAAIT,gBAHQd,SAKRwB,OAAA,CACJrB,KAAAA,QACEQ,QAAS,sCACTE,KAAAA,aAFFD,KAAA,SAAAa,GANJtB,WAAAuB,MAAA,2CAAA,CAAAD,EAAAE,UAAA,SAAAC,EAAAC,GAcF,GAAAD,EAAA,MAAAA,EANQf,QAAQiB,MAAMD,GACdrB,kBASF,SAKAO,UACEN,SACAE,OAAO,CACPY,CAEFd,KAAA,QACME,QADN,+BAEEA,KAAS,YAIZC,CACCT,KAAU,QACRQ,QAAS,oCACTE,KAAQiB,eAFV,CAnBJrB,KAAA,QA2BFE,QAAA,oCAZQY,KAAM,YAcZvB,KAAQ,SAEJyB,GACEhB,WADFiB,MAAA,mEAAA,CAAAD,EAAAM,SAAAN,EAAAO,YAAAP,EAAAQ,QAAA,SAAAL,EAAAC,GAEElB,GAAOiB,EAAE,MAAAA,EACLf,QAAEiB,MAAAD,GAERrB,kBAOEG,SAAAA,cACAY,SAEFC,OAAA,CACEf,CACAE,KAAS,QACLA,QAAE,yCAGLC,KAAK,eAEN,CACAC,KAAQiB,QACRtB,QAAW,wCAHXe,KAAA,cAQA,CAnBAd,KAAM,QACNE,QAAS,yCAmBTY,KAASJ,UAET,CACAN,KAAQiB,QACRtB,QAAW,mDAHXe,KAAA,eAXCX,KAAK,SAASa,GAmBftB,WAASkB,MAAT,wFAA0B,CAAAI,EAAAS,YAAAT,EAAAU,WAAAV,EAAAW,OAAAX,EAAAY,WAAA,SAAAT,EAAAC,GAC1B7B,GACCwB,EADD,MAEAI,EACIf,QAAEiB,MADND,GAEAlB,kBASCC,SAAKO,UAAAW,GACN3B,WAAWuB,MAAM,iBAAAI,EAAA,SAAAF,EAAAC,GACjB,GAAID,EAAK,MAAMA,EACff,QAAQiB,MAAMD,GACdrB,gBAlBA,SAASa,iBAwBTrB,SACOwB,OAAK,CACZrB,CACCM,KAAA,QAtBDE,QAAS,4DACTY,KAAM,QAEN,CACAd,KAAM,QACNE,QAAS,yCACTY,KAAM,eAGLX,KAAK,SAASa,GACftB,WAAWuB,MAAM,+CAAgD,CAACD,EAAOa,UAAWb,EAAOc,MAAO,SAASX,EAAKC,GAChH,GAAID,EAAK,MAAMA,EACff,QAAQiB,MAAMD,GACdrB,kBAMA,SAASc,OACTT,QAAQI,IAAI,YACZd,WAAWqC,MA1KnBrC,WAAWsC,QAAQ,SAASb,GAA5BzB,GAAAA,EAAWsC,MAAAA,EACT5B,QAAAI,IAAS,mBAAAd,WAAAuC,UACT7B","file":"index.min.js","sourcesContent":["//Dependencies\r\nconst inquirer = require(\"inquirer\");\r\nconst mysql = require(\"mysql\");\r\n\r\n\r\n// Create connection to database\r\nconst connection = mysql.createConnection({\r\n  host: \"localhost\",\r\n  port: 3306,\r\n  user: \"root\",\r\n  password: \"Morpheus718\",\r\n  database: \"employee_info_db\"\r\n});\r\n\r\n// Connect to database and call startScreen() to display options to user\r\nconnection.connect(function(err) {\r\n  if (err) throw err;\r\n  console.log(\"connected as id \" + connection.threadId);\r\n  startScreen();\r\n});\r\n\r\n// Displays options to user and calls corresponding function based on their selection\r\nfunction startScreen() {\r\n  inquirer\r\n    .prompt({\r\n      type: \"list\",\r\n      choices: [\r\n        \"Add department\",\r\n        \"Add role\",\r\n        \"Add employee\",\r\n        \"View departments\",\r\n        \"View roles\",\r\n        \"View employees\",\r\n        \"Update employee role\",\r\n        \"Quit\"\r\n      ],\r\n      message: \"What would you like to do?\",\r\n      name: \"option\"\r\n    })\r\n    .then(function(result) {\r\n      console.log(\"You entered: \" + result.option);\r\n\r\n      switch (result.option) {\r\n        case \"Add department\":\r\n          addDepartment();\r\n          break;\r\n        case \"Add role\":\r\n          addRole();\r\n          break;\r\n        case \"Add employee\":\r\n          addEmployee();\r\n          break;\r\n        case \"View departments\":\r\n          viewTable(\"department\");\r\n          break;\r\n        case \"View roles\":\r\n          viewTable(\"role\");\r\n          break;\r\n        case \"View employees\":\r\n          viewTable(\"employee\");\r\n          break;\r\n        case \"Update employee role\":\r\n          updateEmployee();\r\n          break;\r\n        default:\r\n          quit();\r\n      }\r\n    });\r\n}\r\n\r\n// Adds a department to the database\r\nfunction addDepartment() {\r\n  inquirer.prompt({\r\n      type: \"input\",\r\n      message: \"What is the name of the department?\",\r\n      name: \"deptName\"\r\n    })\r\n    .then(function(answer){\r\n      connection.query(\"INSERT INTO department (name) VALUES (?)\", [answer.deptName] , function(err, res) {\r\n        if (err) throw err;\r\n        console.table(res)\r\n        startScreen()\r\n      })\r\n    })\r\n}\r\n\r\n// Adds a role to the database\r\nfunction addRole() {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the name of the role?\",\r\n        name: \"roleName\"\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the salary for this role?\",\r\n        name: \"salaryTotal\"\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the department id number?\",\r\n        name: \"deptID\"\r\n      }\r\n    ])\r\n    .then(function(answer) {\r\n      connection.query(\"INSERT INTO role (title, salary, department_id) VALUES (?, ?, ?)\", [answer.roleName, answer.salaryTotal, answer.deptID], function(err, res) {\r\n        if (err) throw err;\r\n        console.table(res);\r\n        startScreen();\r\n      });\r\n    });\r\n}\r\n\r\n// Adds an employee to the database\r\nfunction addEmployee() {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the first name of the employee?\",\r\n        name: \"eeFirstName\"\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the last name of the employee?\",\r\n        name: \"eeLastName\"\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the employee's role id number?\",\r\n        name: \"roleID\"\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the id number of the employee's manager?\",\r\n        name: \"managerID\"\r\n        }\r\n        ])\r\n        .then(function(answer) {\r\n        connection.query(\"INSERT INTO employee (first_name, last_name, role_id, manager_id) VALUES (?, ?, ?, ?)\", [answer.eeFirstName, answer.eeLastName, answer.roleID, answer.managerID], function(err, res) {\r\n        if (err) throw err;\r\n        console.table(res);\r\n        startScreen();\r\n        });\r\n        });\r\n        }\r\n        \r\n        // Displays table based on user selection\r\n        function viewTable(table) {\r\n        connection.query(\"SELECT * FROM \" + table, function(err, res) {\r\n        if (err) throw err;\r\n        console.table(res);\r\n        startScreen();\r\n        });\r\n        }\r\n        \r\n        // Updates an employee's role in the database\r\n        function updateEmployee() {\r\n        inquirer\r\n        .prompt([\r\n        {\r\n        type: \"input\",\r\n        message: \"What is the id number of the employee you want to update?\",\r\n        name: \"eeID\"\r\n        },\r\n        {\r\n        type: \"input\",\r\n        message: \"What is the id number of the new role?\",\r\n        name: \"newRoleID\"\r\n        }\r\n        ])\r\n        .then(function(answer) {\r\n        connection.query(\"UPDATE employee SET role_id = ? WHERE id = ?\", [answer.newRoleID, answer.eeID], function(err, res) {\r\n        if (err) throw err;\r\n        console.table(res);\r\n        startScreen();\r\n        });\r\n        });\r\n        }\r\n        \r\n        // Ends the database connection\r\n        function quit() {\r\n        console.log(\"Goodbye!\");\r\n        connection.end();\r\n        }"]}