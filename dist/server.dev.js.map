{"version":3,"sources":["server.js"],"names":["inquirer","require","mysql","cTable","db","connection","createConnection","host","port","user","database","connect","err","console","log","threadId","startScreen","prompt","type","choices","message","name","then","result","option","addDepartment","addRole","addEmployee","viewDepartment","viewRoles","viewEmployees","updateEmployee","quit","answer","query","deptName","res","table","roleName","salaryTotal","deptID","eeFirstName","eeLastName","roleID","managerID","updateRole","eeUpdate","end","process","exit"],"mappings":"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","sourcesContent":["const inquirer = require(\"inquirer\"),\r\n  mysql = require(\"mysql\"),\r\n  cTable = require(\"console.table\"),\r\n  db = require(\".\");\r\n\r\n  \r\nconst connection = mysql.createConnection({\r\n  host: \"localhost\",\r\n  port: 3306,\r\n  user: \"root\",\r\n\r\n  database: \"employeesDB\",\r\n});\r\n\r\nconnection.connect((err) => {\r\n  if (err) throw err;\r\n  console.log(\"connected as id \" + connection.threadId);\r\n  startScreen();\r\n});\r\n\r\nconst startScreen = () => {\r\n  inquirer\r\n    .prompt({\r\n      type: \"list\",\r\n      choices: [\r\n        \"Add department\",\r\n        \"Add role\",\r\n        \"Add employee\",\r\n        \"View departments\",\r\n        \"View roles\",\r\n        \"View employees\",\r\n        \"Update employee role\",\r\n        \"Quit\",\r\n      ],\r\n      message: \"What would you like to do?\",\r\n      name: \"option\",\r\n    })\r\n    .then((result) => {\r\n      console.log(\"You entered: \" + result.option);\r\n      switch (result.option) {\r\n        case \"Add department\":\r\n          addDepartment();\r\n          break;\r\n        case \"Add role\":\r\n          addRole();\r\n          break;\r\n        case \"Add employee\":\r\n          addEmployee();\r\n          break;\r\n        case \"View departments\":\r\n          viewDepartment();\r\n          break;\r\n        case \"View roles\":\r\n          viewRoles();\r\n          break;\r\n        case \"View employees\":\r\n          viewEmployees();\r\n          break;\r\n        case \"Update employee role\":\r\n          updateEmployee();\r\n          break;\r\n        default:\r\n          quit();\r\n      }\r\n    });\r\n};\r\n\r\nconst addDepartment = () => {\r\n  inquirer\r\n    .prompt({\r\n      type: \"input\",\r\n      message: \"What is the name of the department?\",\r\n      name: \"deptName\",\r\n    })\r\n    .then((answer) => {\r\n      connection.query(\r\n        \"INSERT INTO department (name) VALUES (?)\",\r\n        [answer.deptName],\r\n        (err, res) => {\r\n          if (err) throw err;\r\n          console.table(res);\r\n          startScreen();\r\n        }\r\n      );\r\n    });\r\n};\r\n\r\nconst addRole = () => {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the name of the role?\",\r\n        name: \"roleName\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the salary for this role?\",\r\n        name: \"salaryTotal\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the department id number?\",\r\n        name: \"deptID\",\r\n      },\r\n    ])\r\n    .then((answer) => {\r\n      connection.query(\r\n        \"INSERT INTO role (title, salary, department_id) VALUES (?, ?, ?)\",\r\n        [answer.roleName, answer.salaryTotal, answer.deptID],\r\n        (err, res) => {\r\n          if (err) throw err;\r\n          console.table(res);\r\n          startScreen();\r\n        }\r\n      );\r\n    });\r\n};\r\n// Function to add employee\r\nfunction addEmployee() {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the first name of the employee?\",\r\n        name: \"eeFirstName\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the last name of the employee?\",\r\n        name: \"eeLastName\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the employee's role id number?\",\r\n        name: \"roleID\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the manager id number?\",\r\n        name: \"managerID\",\r\n      },\r\n    ])\r\n    .then(function (answer) {\r\n      connection.query(\r\n        \"INSERT INTO employee (first_name, last_name, role_id, manager_id) VALUES (?, ?, ?, ?)\",\r\n        [\r\n          answer.eeFirstName,\r\n          answer.eeLastName,\r\n          answer.roleID,\r\n          answer.managerID,\r\n        ],\r\n        function (err, res) {\r\n          if (err) throw err;\r\n          console.table(res);\r\n          startScreen();\r\n        }\r\n      );\r\n    });\r\n}\r\n\r\n// Function to update employee\r\nfunction updateEmployee() {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"input\",\r\n        message: \"Which employee would you like to update?\",\r\n        name: \"eeUpdate\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What do you want to update to?\",\r\n        name: \"updateRole\",\r\n      },\r\n    ])\r\n    .then(function (answer) {\r\n      connection.query(\r\n        \"UPDATE employee SET role_id=? WHERE first_name= ?\",\r\n        [answer.updateRole, answer.eeUpdate],\r\n        function (err, res) {\r\n          if (err) throw err;\r\n          console.table(res);\r\n          startScreen();\r\n        }\r\n      );\r\n    });\r\n}\r\n\r\n// Function to view department\r\nfunction viewDepartment() {\r\n  let query = \"SELECT * FROM department\";\r\n  connection.query(query, function (err, res) {\r\n    if (err) throw err;\r\n    console.table(res);\r\n    startScreen();\r\n  });\r\n}\r\n\r\n// Function to view roles\r\nfunction viewRoles() {\r\n  let query = \"SELECT * FROM role\";\r\n  connection.query(query, function (err, res) {\r\n    if (err) throw err;\r\n    console.table(res);\r\n    startScreen();\r\n  });\r\n}\r\n\r\n// Function to view employees\r\nfunction viewEmployees() {\r\n  let query = \"SELECT * FROM employee\";\r\n  connection.query(query, function (err, res) {\r\n    if (err) throw err;\r\n    console.table(res);\r\n    startScreen();\r\n  });\r\n}\r\n\r\n// Function to quit\r\nfunction quit() {\r\n  connection.end();\r\n  process.exit();\r\n}\r\n"],"file":"server.dev.js"}