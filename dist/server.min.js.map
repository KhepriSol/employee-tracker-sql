{"version":3,"sources":["server.js"],"names":["inquirer","require","mysql","cTable","db","connection","createConnection","host","port","database","connect","err","console","log","startScreen","threadId","type","choices","message","name","then","addDepartment","addRole","result","addEmployee","option","viewDepartment","viewRoles","viewEmployees","updateEmployee","quit","table","answer","query","deptName","prompt","res","roleName","salaryTotal","deptID","eeFirstName","roleID","managerID","process","updateRole","eeUpdate","end","exit"],"mappings":"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","file":"server.min.js","sourcesContent":["const inquirer = require(\"inquirer\"),\r\n  mysql = require(\"mysql\"),\r\n  cTable = require(\"console.table\"),\r\n  db = require(\".\");\r\n\r\n  \r\nconst connection = mysql.createConnection({\r\n  host: \"localhost\",\r\n  port: 3306,\r\n  user: \"root\",\r\n\r\n  database: \"employeesDB\",\r\n});\r\n\r\nconnection.connect((err) => {\r\n  if (err) throw err;\r\n  console.log(\"connected as id \" + connection.threadId);\r\n  startScreen();\r\n});\r\n\r\nconst startScreen = () => {\r\n  inquirer\r\n    .prompt({\r\n      type: \"list\",\r\n      choices: [\r\n        \"Add department\",\r\n        \"Add role\",\r\n        \"Add employee\",\r\n        \"View departments\",\r\n        \"View roles\",\r\n        \"View employees\",\r\n        \"Update employee role\",\r\n        \"Quit\",\r\n      ],\r\n      message: \"What would you like to do?\",\r\n      name: \"option\",\r\n    })\r\n    .then((result) => {\r\n      console.log(\"You entered: \" + result.option);\r\n      switch (result.option) {\r\n        case \"Add department\":\r\n          addDepartment();\r\n          break;\r\n        case \"Add role\":\r\n          addRole();\r\n          break;\r\n        case \"Add employee\":\r\n          addEmployee();\r\n          break;\r\n        case \"View departments\":\r\n          viewDepartment();\r\n          break;\r\n        case \"View roles\":\r\n          viewRoles();\r\n          break;\r\n        case \"View employees\":\r\n          viewEmployees();\r\n          break;\r\n        case \"Update employee role\":\r\n          updateEmployee();\r\n          break;\r\n        default:\r\n          quit();\r\n      }\r\n    });\r\n};\r\n\r\nconst addDepartment = () => {\r\n  inquirer\r\n    .prompt({\r\n      type: \"input\",\r\n      message: \"What is the name of the department?\",\r\n      name: \"deptName\",\r\n    })\r\n    .then((answer) => {\r\n      connection.query(\r\n        \"INSERT INTO department (name) VALUES (?)\",\r\n        [answer.deptName],\r\n        (err, res) => {\r\n          if (err) throw err;\r\n          console.table(res);\r\n          startScreen();\r\n        }\r\n      );\r\n    });\r\n};\r\n\r\nconst addRole = () => {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the name of the role?\",\r\n        name: \"roleName\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the salary for this role?\",\r\n        name: \"salaryTotal\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the department id number?\",\r\n        name: \"deptID\",\r\n      },\r\n    ])\r\n    .then((answer) => {\r\n      connection.query(\r\n        \"INSERT INTO role (title, salary, department_id) VALUES (?, ?, ?)\",\r\n        [answer.roleName, answer.salaryTotal, answer.deptID],\r\n        (err, res) => {\r\n          if (err) throw err;\r\n          console.table(res);\r\n          startScreen();\r\n        }\r\n      );\r\n    });\r\n};\r\n// Function to add employee\r\nfunction addEmployee() {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the first name of the employee?\",\r\n        name: \"eeFirstName\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What's the last name of the employee?\",\r\n        name: \"eeLastName\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the employee's role id number?\",\r\n        name: \"roleID\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What is the manager id number?\",\r\n        name: \"managerID\",\r\n      },\r\n    ])\r\n    .then(function (answer) {\r\n      connection.query(\r\n        \"INSERT INTO employee (first_name, last_name, role_id, manager_id) VALUES (?, ?, ?, ?)\",\r\n        [\r\n          answer.eeFirstName,\r\n          answer.eeLastName,\r\n          answer.roleID,\r\n          answer.managerID,\r\n        ],\r\n        function (err, res) {\r\n          if (err) throw err;\r\n          console.table(res);\r\n          startScreen();\r\n        }\r\n      );\r\n    });\r\n}\r\n\r\n// Function to update employee\r\nfunction updateEmployee() {\r\n  inquirer\r\n    .prompt([\r\n      {\r\n        type: \"input\",\r\n        message: \"Which employee would you like to update?\",\r\n        name: \"eeUpdate\",\r\n      },\r\n      {\r\n        type: \"input\",\r\n        message: \"What do you want to update to?\",\r\n        name: \"updateRole\",\r\n      },\r\n    ])\r\n    .then(function (answer) {\r\n      connection.query(\r\n        \"UPDATE employee SET role_id=? WHERE first_name= ?\",\r\n        [answer.updateRole, answer.eeUpdate],\r\n        function (err, res) {\r\n          if (err) throw err;\r\n          console.table(res);\r\n          startScreen();\r\n        }\r\n      );\r\n    });\r\n}\r\n\r\n// Function to view department\r\nfunction viewDepartment() {\r\n  let query = \"SELECT * FROM department\";\r\n  connection.query(query, function (err, res) {\r\n    if (err) throw err;\r\n    console.table(res);\r\n    startScreen();\r\n  });\r\n}\r\n\r\n// Function to view roles\r\nfunction viewRoles() {\r\n  let query = \"SELECT * FROM role\";\r\n  connection.query(query, function (err, res) {\r\n    if (err) throw err;\r\n    console.table(res);\r\n    startScreen();\r\n  });\r\n}\r\n\r\n// Function to view employees\r\nfunction viewEmployees() {\r\n  let query = \"SELECT * FROM employee\";\r\n  connection.query(query, function (err, res) {\r\n    if (err) throw err;\r\n    console.table(res);\r\n    startScreen();\r\n  });\r\n}\r\n\r\n// Function to quit\r\nfunction quit() {\r\n  connection.end();\r\n  process.exit();\r\n}\r\n"]}